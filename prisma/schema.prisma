generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(uuid()) // UUID as primary key
  username            String          @unique
  email               String          @unique
  password            String
  displayName         String?         // Display name (optional)
  profilePicture      String?         // Profile picture URL (optional)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relations
  messages        Message[]       @relation("SentMessages")
  memberships         Membership[]    
  messageStatuses     MessageStatus[]
  sentFriendRequests   FriendRequest[] @relation("Sender")
  receivedFriendRequests FriendRequest[] @relation("Receiver")

  // Friends relations
  friends             Friendship[]    @relation("UserToFriends")
  befriended          Friendship[]    @relation("FriendsToUser")
}

model Chat {
  id                  String          @id @default(uuid()) // UUID as primary key
  name                String
  isGroup             Boolean         @default(false) // Indicates if it's a group chat
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relations
  messages            Message[]       // Messages in this chat
  memberships         Membership[]    // Users in this chat
}

model Membership {
  id                  String          @id @default(uuid()) // UUID as primary key
  userId              String          // UUID
  chatId              String          // UUID
  role                String          // Role in chat (e.g., admin, member)

  // Relations
  user                User            @relation(fields: [userId], references: [id])
  chat                Chat            @relation(fields: [chatId], references: [id])

  @@unique([userId, chatId]) 
}

model Message {
  id                  String          @id @default(uuid()) // UUID as primary key
  content             String?        
  mediaUrl            String?        
  messageType         String          // Type of message (e.g., text, image, video)
  createdAt           DateTime        @default(now())
  deletedAt           DateTime?      
  readByAll           Boolean         @default(false)

  senderId            String          
  sender              User            @relation("SentMessages", fields: [senderId], references: [id])

  chatId              String?         
  chat                Chat?           @relation(fields: [chatId], references: [id])

  replyToId           String?
  replyTo             Message?        @relation("MessageReplies", fields: [replyToId], references: [id])
  replies             Message[]       @relation("MessageReplies")

  statuses            MessageStatus[]

  @@index([chatId]) 
  @@index([senderId]) 
  @@index([createdAt]) 
}

model MessageStatus {
  id                  String          @id @default(uuid()) 
  messageId           String          
  message             Message         @relation(fields: [messageId], references: [id])
  userId              String          
  user                User            @relation(fields: [userId], references: [id])
  status              String          @default("PENDING")
  createdAt           DateTime        @default(now())

  @@unique([messageId, userId]) 
  @@index([status]) 
}

model FriendRequest {
  id                  String          @id @default(uuid()) // UUID as primary key
  senderId            String          
  receiverId          String          
  createdAt           DateTime        @default(now())
  status              String          @default("PENDING") 

  // Relations
  sender              User            @relation("Sender", fields: [senderId], references: [id])
  receiver            User            @relation("Receiver", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId]) 
}

model Friendship {
  id                  String          @id @default(uuid()) // UUID as primary key
  userId              String          
  friendId            String          
  createdAt           DateTime        @default(now())

  // Relations
  user                User            @relation("UserToFriends", fields: [userId], references: [id])
  friend              User            @relation("FriendsToUser", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}
